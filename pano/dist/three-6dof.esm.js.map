{"version":3,"file":"three-6dof.esm.js","sources":["../src/components/three.ts","../src/components/uniforms.ts","../src/components/constants.ts","../src/components/viewer.ts"],"sourcesContent":["/**\n * A small wrapper for THREE imports so rollup tree-shakes only the parts we need better\n */\n\n/* eslint  @typescript-eslint/camelcase: 0 */\n\nexport {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBFormat,\n} from 'three'\n","export const Uniforms: object = {\n  colorTexture: {\n    type: 't',\n    value: null,\n  },\n  depthTexture: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n","enum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n  EPIC = 1024,\n}\n\nenum Style {\n  WIRE = 0,\n  POINTS = 1,\n  MESH = 2,\n}\n\nenum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n\nclass Props {\n  public type: TextureType = TextureType.SEPERATE\n  public density: MeshDensity = MeshDensity.HIGH\n  public style: Style = Style.MESH\n  public displacement: number = 4.0\n  public radius: number = 6\n}\n\nexport { MeshDensity, Style, TextureType, Props }\n","import {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBFormat,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style, MeshDensity, TextureType, Props } from './constants'\n\nexport default class Viewer extends Object3D {\n  /** Default props if not provided */\n  private props: Props = new Props()\n\n  private static geometry: SphereBufferGeometry\n  private material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(texture: Texture, depth?: Texture, props?: object) {\n    super()\n\n    /** Assign the user provided props, if any */\n    this.setProps(this.props, props)\n\n    // /** Add the compiler definitions needed to pick the right GLSL methods */\n    this.setShaderDefines(this.material, [TextureType[this.props.type]])\n\n    /**\n     * Create the geometry only once, it can be shared between instances\n     *  of the viewer since it's kept as a static class member\n     **/\n    if (!Viewer.geometry) {\n      Viewer.geometry = this.createSphereGeometry(\n        this.props.radius,\n        this.props.density,\n      )\n    }\n\n    /** Assign the textures and update the shader uniforms */\n    this.assignTexture(this.props.type, texture, depth)\n\n    /** Set the displacement using the public setter */\n    this.displacement = this.props.displacement\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    super.add(this.createMesh(Viewer.geometry, this.material, this.props.style))\n  }\n\n  /** Small util to set the defines of the GLSL program based on textureType */\n  private setShaderDefines(\n    material: ShaderMaterial,\n    defines: Array<string>,\n  ): void {\n    defines.forEach(define => (material.defines[define] = ''))\n  }\n\n  /** Internal util to create buffer geometry */\n  private createSphereGeometry(\n    radius: number,\n    meshDensity: MeshDensity,\n  ): SphereBufferGeometry {\n    return new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal util to set viewer props from config object */\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    /** Iterate over user provided props and assign to viewer props */\n    for (let prop in userProps) {\n      if (viewerProps[prop]) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `THREE.SixDOF: Provided ${prop} in config but it is not a valid property and being ignored`,\n        )\n      }\n    }\n  }\n\n  /** Internal util to assign the textures to the shader uniforms */\n  private assignTexture(\n    type: TextureType,\n    colorTexture: Texture,\n    depthTexture?: Texture,\n  ): void {\n    /** Check wheter we are rendering top bottom or just single textures */\n    if (type === TextureType.SEPERATE) {\n      if (!depthTexture)\n        throw new Error(\n          'When using seperate texture type, depthmap must be provided',\n        )\n      this.depth = this.setDefaultTextureProps(depthTexture)\n    }\n\n    /** Assign the main texture */\n    this.texture = this.setDefaultTextureProps(colorTexture)\n  }\n\n  private setDefaultTextureProps(texture: Texture): Texture {\n    texture.minFilter = NearestFilter\n    texture.magFilter = LinearFilter\n    texture.format = RGBFormat\n    texture.generateMipmaps = false\n    return texture\n  }\n\n  /** An internal util to create the Mesh Object3D */\n  private createMesh(\n    geo: SphereBufferGeometry,\n    mat: ShaderMaterial,\n    style: Style,\n  ): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        if (!this.material.wireframe) this.material.wireframe = true\n        return new Mesh(geo, mat)\n      case Style.MESH:\n        if (this.material.wireframe) this.material.wireframe = false\n        return new Mesh(geo, mat)\n      case Style.POINTS:\n        return new Points(geo, mat)\n    }\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public set displacement(val: number) {\n    this.material.uniforms.displacement.value = val\n  }\n\n  /** Setter for depthmap uniform */\n  public set depth(map: Texture) {\n    this.material.uniforms.depthTexture.value = map\n  }\n\n  /** Setter for depthmap uniform */\n  public set texture(map: Texture) {\n    this.material.uniforms.colorTexture.value = map\n  }\n\n  /** Setter for the opacity */\n  public set opacity(val: number) {\n    this.material.uniforms.opacity.value = val\n  }\n\n  /** Setter for the point size */\n  public set pointSize(val: number) {\n    this.material.uniforms.pointSize.value = val\n  }\n\n  /** Getter for the current viewer props */\n  public get config(): Props {\n    return this.props\n  }\n\n  /** Getter for the opacity */\n  public get opacity(): number {\n    return this.material.uniforms.opacity.value\n  }\n\n  /** Getter for the point size */\n  public get pointSize(): number {\n    return this.material.uniforms.pointSize.value\n  }\n\n  /** Getter for displacement amount */\n  public get displacement(): number {\n    return this.material.uniforms.displacement.value\n  }\n\n  /** Getter for texture */\n  public get texture(): Texture {\n    return this.material.uniforms.colorTexture.value\n  }\n\n  /** Getter for the depth texture */\n  public get depth(): Texture {\n    return this.material.uniforms.opacity.value\n  }\n}\n"],"names":["Uniforms","colorTexture","type","value","depthTexture","time","opacity","pointSize","debugDepth","displacement","MeshDensity","Style","TextureType","Props","SEPERATE","density","HIGH","style","MESH","radius","Viewer","Object3D","constructor","texture","depth","props","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","setProps","setShaderDefines","geometry","createSphereGeometry","assignTexture","add","createMesh","defines","forEach","define","meshDensity","SphereBufferGeometry","viewerProps","userProps","prop","console","warn","Error","setDefaultTextureProps","minFilter","NearestFilter","magFilter","LinearFilter","format","RGBFormat","generateMipmaps","geo","mat","WIRE","wireframe","Mesh","POINTS","Points","toggleDepthDebug","state","undefined","val","map","config"],"mappings":"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"}