{"version":3,"file":"three-6dof.amd.js","sources":["../src/components/three.ts","../src/components/uniforms.ts","../src/components/constants.ts","../src/components/viewer.ts"],"sourcesContent":["/**\n * A small wrapper for THREE imports so rollup tree-shakes only the parts we need better\n */\n\n/* eslint  @typescript-eslint/camelcase: 0 */\n\nexport {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBFormat,\n} from 'three'\n","export const Uniforms: object = {\n  colorTexture: {\n    type: 't',\n    value: null,\n  },\n  depthTexture: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n","enum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n  EPIC = 1024,\n}\n\nenum Style {\n  WIRE = 0,\n  POINTS = 1,\n  MESH = 2,\n}\n\nenum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n\nclass Props {\n  public type: TextureType = TextureType.SEPERATE\n  public density: MeshDensity = MeshDensity.HIGH\n  public style: Style = Style.MESH\n  public displacement: number = 4.0\n  public radius: number = 6\n}\n\nexport { MeshDensity, Style, TextureType, Props }\n","import {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBFormat,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style, MeshDensity, TextureType, Props } from './constants'\n\nexport default class Viewer extends Object3D {\n  /** Default props if not provided */\n  private props: Props = new Props()\n\n  private static geometry: SphereBufferGeometry\n  private material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(texture: Texture, depth?: Texture, props?: object) {\n    super()\n\n    /** Assign the user provided props, if any */\n    this.setProps(this.props, props)\n\n    // /** Add the compiler definitions needed to pick the right GLSL methods */\n    this.setShaderDefines(this.material, [TextureType[this.props.type]])\n\n    /**\n     * Create the geometry only once, it can be shared between instances\n     *  of the viewer since it's kept as a static class member\n     **/\n    if (!Viewer.geometry) {\n      Viewer.geometry = this.createSphereGeometry(\n        this.props.radius,\n        this.props.density,\n      )\n    }\n\n    /** Assign the textures and update the shader uniforms */\n    this.assignTexture(this.props.type, texture, depth)\n\n    /** Set the displacement using the public setter */\n    this.displacement = this.props.displacement\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    super.add(this.createMesh(Viewer.geometry, this.material, this.props.style))\n  }\n\n  /** Small util to set the defines of the GLSL program based on textureType */\n  private setShaderDefines(\n    material: ShaderMaterial,\n    defines: Array<string>,\n  ): void {\n    defines.forEach(define => (material.defines[define] = ''))\n  }\n\n  /** Internal util to create buffer geometry */\n  private createSphereGeometry(\n    radius: number,\n    meshDensity: MeshDensity,\n  ): SphereBufferGeometry {\n    return new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal util to set viewer props from config object */\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    /** Iterate over user provided props and assign to viewer props */\n    for (let prop in userProps) {\n      if (viewerProps[prop]) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `THREE.SixDOF: Provided ${prop} in config but it is not a valid property and being ignored`,\n        )\n      }\n    }\n  }\n\n  /** Internal util to assign the textures to the shader uniforms */\n  private assignTexture(\n    type: TextureType,\n    colorTexture: Texture,\n    depthTexture?: Texture,\n  ): void {\n    /** Check wheter we are rendering top bottom or just single textures */\n    if (type === TextureType.SEPERATE) {\n      if (!depthTexture)\n        throw new Error(\n          'When using seperate texture type, depthmap must be provided',\n        )\n      this.depth = this.setDefaultTextureProps(depthTexture)\n    }\n\n    /** Assign the main texture */\n    this.texture = this.setDefaultTextureProps(colorTexture)\n  }\n\n  private setDefaultTextureProps(texture: Texture): Texture {\n    texture.minFilter = NearestFilter\n    texture.magFilter = LinearFilter\n    texture.format = RGBFormat\n    texture.generateMipmaps = false\n    return texture\n  }\n\n  /** An internal util to create the Mesh Object3D */\n  private createMesh(\n    geo: SphereBufferGeometry,\n    mat: ShaderMaterial,\n    style: Style,\n  ): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        if (!this.material.wireframe) this.material.wireframe = true\n        return new Mesh(geo, mat)\n      case Style.MESH:\n        if (this.material.wireframe) this.material.wireframe = false\n        return new Mesh(geo, mat)\n      case Style.POINTS:\n        return new Points(geo, mat)\n    }\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public set displacement(val: number) {\n    this.material.uniforms.displacement.value = val\n  }\n\n  /** Setter for depthmap uniform */\n  public set depth(map: Texture) {\n    this.material.uniforms.depthTexture.value = map\n  }\n\n  /** Setter for depthmap uniform */\n  public set texture(map: Texture) {\n    this.material.uniforms.colorTexture.value = map\n  }\n\n  /** Setter for the opacity */\n  public set opacity(val: number) {\n    this.material.uniforms.opacity.value = val\n  }\n\n  /** Setter for the point size */\n  public set pointSize(val: number) {\n    this.material.uniforms.pointSize.value = val\n  }\n\n  /** Getter for the current viewer props */\n  public get config(): Props {\n    return this.props\n  }\n\n  /** Getter for the opacity */\n  public get opacity(): number {\n    return this.material.uniforms.opacity.value\n  }\n\n  /** Getter for the point size */\n  public get pointSize(): number {\n    return this.material.uniforms.pointSize.value\n  }\n\n  /** Getter for displacement amount */\n  public get displacement(): number {\n    return this.material.uniforms.displacement.value\n  }\n\n  /** Getter for texture */\n  public get texture(): Texture {\n    return this.material.uniforms.colorTexture.value\n  }\n\n  /** Getter for the depth texture */\n  public get depth(): Texture {\n    return this.material.uniforms.opacity.value\n  }\n}\n"],"names":["Uniforms","colorTexture","type","value","depthTexture","time","opacity","pointSize","debugDepth","displacement","MeshDensity","Style","TextureType","Props","SEPERATE","density","HIGH","style","MESH","radius","Viewer","Object3D","constructor","texture","depth","props","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","setProps","setShaderDefines","geometry","createSphereGeometry","assignTexture","add","createMesh","defines","forEach","define","meshDensity","SphereBufferGeometry","viewerProps","userProps","prop","console","warn","Error","setDefaultTextureProps","minFilter","NearestFilter","magFilter","LinearFilter","format","RGBFormat","generateMipmaps","geo","mat","WIRE","wireframe","Mesh","POINTS","Points","toggleDepthDebug","state","undefined","val","map","config"],"mappings":"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"}